'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OrderBook = require('./orderbook');

var BidOrderBook = function (_OrderBook) {
    _inherits(BidOrderBook, _OrderBook);

    function BidOrderBook() {
        _classCallCheck(this, BidOrderBook);

        return _possibleConstructorReturn(this, (BidOrderBook.__proto__ || Object.getPrototypeOf(BidOrderBook)).apply(this, arguments));
    }

    _createClass(BidOrderBook, [{
        key: 'top',
        value: function top() {
            var _this2 = this;

            var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            var rates = Object.values(this.store).map(function (o) {
                return o.rate;
            });
            rates.sort(function (a, b) {
                return b - a;
            });
            rates.splice(limit);
            return rates.map(function (key) {
                return _this2.store[key];
            });
        }
    }]);

    return BidOrderBook;
}(OrderBook);

module.exports = BidOrderBook;
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var assert = require('assert');
var EventEmitter = require('events');
var BidOrderBook = require('./bidorderbook');
var AskOrderBook = require('./askorderbook');

var Market = function (_EventEmitter) {
    _inherits(Market, _EventEmitter);

    _createClass(Market, [{
        key: 'onInitialState',
        value: function onInitialState(state) {
            var Sells = state.Sells,
                Buys = state.Buys;

            // type 0 means new order

            var addTypeZero = function addTypeZero(order) {
                return _extends({
                    Type: 0
                }, order);
            };
            Sells = Sells.map(addTypeZero);
            Buys = Buys.map(addTypeZero);
            this.onUpdateExchangeState({
                Sells,
                Buys
            });
        }
    }, {
        key: 'onUpdateExchangeState',
        value: function onUpdateExchangeState(update) {
            update.Sells.forEach(this.asks.onOrderEvent);
            if (update.Sells.length > 0) {
                this.emit('askUpdate', this);
            }

            update.Buys.forEach(this.bids.onOrderEvent);
            if (update.Buys.length > 0) {
                this.emit('bidUpdate', this);
            }
        }
    }]);

    function Market(name) {
        _classCallCheck(this, Market);

        var _this = _possibleConstructorReturn(this, (Market.__proto__ || Object.getPrototypeOf(Market)).call(this));

        _this.onInitialState = _this.onInitialState.bind(_this);
        _this.onUpdateExchangeState = _this.onUpdateExchangeState.bind(_this);

        _this.name = name;
        _this.bids = new BidOrderBook();
        _this.asks = new AskOrderBook();
        return _this;
    }

    return Market;
}(EventEmitter);

module.exports = Market;
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

require('babel-polyfill');

var BittrexConnection = require('./connection');
var BidOrderBook = require('./bidorderbook');
var AskOrderBook = require('./askorderbook');
var Market = require('./market');

var BittrexOrderBook = function () {
    _createClass(BittrexOrderBook, [{
        key: 'subscribeToMarket',
        value: function subscribeToMarket(market) {
            return this.conn.call('SubscribeToExchangeDeltas', market);
        }
    }, {
        key: 'getInitialState',
        value: function getInitialState(market) {
            if (this.haveMarket(market)) {
                return this.conn.call('QueryExchangeState', market).then(this.markets[market].onInitialState);
            }
        }
    }, {
        key: 'setupConn',
        value: function setupConn() {
            var _this = this;

            this.conn = new BittrexConnection();
            this.conn.on('updateExchangeState', function (update) {
                var market = update.MarketName;
                if (_this.haveMarket(market)) {
                    _this.markets[market].onUpdateExchangeState(update);
                }
            });
        }
    }, {
        key: 'haveMarket',
        value: function haveMarket(market) {
            return this.markets.hasOwnProperty(market);
        }
    }, {
        key: 'market',
        value: function market(_market) {
            var _this2 = this;

            if (!this.haveMarket(_market)) {
                // create market now
                this.markets[_market] = new Market(_market);
                this.conn.ready().then(function () {
                    return _this2.getInitialState(_market);
                }).then(function () {
                    return _this2.subscribeToMarket(_market);
                });
            }
            return this.markets[_market];
        }
    }]);

    function BittrexOrderBook() {
        _classCallCheck(this, BittrexOrderBook);

        this.markets = {};
        this.setupConn();
    }

    return BittrexOrderBook;
}();

module.exports = BittrexOrderBook;
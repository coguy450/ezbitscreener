'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var cloudscraper = require('cloudscraper');
var winston = require('winston');
var singalR = require('signalr-client');

var PROTECTED_PAGE = 'https://bittrex.com/Market/Index?MarketName=USDT-BTC';

var BittrexConnection = function () {
    _createClass(BittrexConnection, [{
        key: 'on',

        // TODO(gtklocker): handle case where client disconnects mid-operation
        value: function on(evt, cb) {
            this.client.on('CoreHub', evt, cb);
        }
    }, {
        key: 'call',
        value: function call(method) {
            var _this = this;

            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }

            var callRepr = `${method}(${args.join(', ')})`;
            return new Promise(function (resolve, reject) {
                var _client;

                winston.debug('Calling', callRepr);
                (_client = _this.client).call.apply(_client, ['CoreHub', method].concat(args)).done(function (err, res) {
                    if (err) {
                        winston.debug(callRepr, 'returned with error', err);
                        reject(err);
                    }

                    if (res) {
                        winston.debug(callRepr, 'succeeded with ', res);
                        resolve(res);
                    }
                });
            });
        }
    }, {
        key: 'ready',
        value: function ready() {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                if (_this2.isConnected) {
                    resolve();
                    return;
                } else {
                    _this2.awaitingClients.push({
                        resolve,
                        reject
                    });
                }
            });
        }
    }]);

    function BittrexConnection() {
        var _this3 = this;

        _classCallCheck(this, BittrexConnection);

        this.client = new singalR.client('wss://socket.bittrex.com/signalr', // url
        ['CoreHub'], // hubs
        undefined, // reconnection timeout
        true // don't start automatically
        );

        this.awaitingClients = [];
        this.isConnected = false;

        this.client.serviceHandlers.connected = function () {
            _this3.isConnected = true;

            var client = void 0;
            while ((client = _this3.awaitingClients.pop()) !== undefined) {
                client.resolve();
            }
        };
        this.client.serviceHandlers.connectFailed = function () {
            var client = void 0;
            while ((client = _this3.awaitingClients.pop()) !== undefined) {
                client.reject();
            }
        };
        cloudscraper.get(PROTECTED_PAGE, function (err, resp, body) {
            if (err) {
                winston.warn('failed to get cloudflare cookie');
            } else {
                _this3.client.headers = resp.request.headers;
            }
            _this3.client.start();
        });
    }

    return BittrexConnection;
}();

module.exports = BittrexConnection;